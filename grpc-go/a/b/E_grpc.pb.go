// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package b

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EeeeeClient is the client API for Eeeee service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EeeeeClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type eeeeeClient struct {
	cc grpc.ClientConnInterface
}

func NewEeeeeClient(cc grpc.ClientConnInterface) EeeeeClient {
	return &eeeeeClient{cc}
}

func (c *eeeeeClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/a.b.Eeeee/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EeeeeServer is the server API for Eeeee service.
// All implementations must embed UnimplementedEeeeeServer
// for forward compatibility
type EeeeeServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedEeeeeServer()
}

// UnimplementedEeeeeServer must be embedded to have forward compatible implementations.
type UnimplementedEeeeeServer struct {
}

func (UnimplementedEeeeeServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedEeeeeServer) mustEmbedUnimplementedEeeeeServer() {}

// UnsafeEeeeeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EeeeeServer will
// result in compilation errors.
type UnsafeEeeeeServer interface {
	mustEmbedUnimplementedEeeeeServer()
}

func RegisterEeeeeServer(s grpc.ServiceRegistrar, srv EeeeeServer) {
	s.RegisterService(&Eeeee_ServiceDesc, srv)
}

func _Eeeee_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EeeeeServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/a.b.Eeeee/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EeeeeServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Eeeee_ServiceDesc is the grpc.ServiceDesc for Eeeee service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Eeeee_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "a.b.Eeeee",
	HandlerType: (*EeeeeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Eeeee_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "E.proto",
}
