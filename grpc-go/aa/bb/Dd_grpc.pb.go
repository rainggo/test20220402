// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Dd2Client is the client API for Dd2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Dd2Client interface {
	SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type dd2Client struct {
	cc grpc.ClientConnInterface
}

func NewDd2Client(cc grpc.ClientConnInterface) Dd2Client {
	return &dd2Client{cc}
}

func (c *dd2Client) SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/aa.bb.Dd2/SayHello2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Dd2Server is the server API for Dd2 service.
// All implementations must embed UnimplementedDd2Server
// for forward compatibility
type Dd2Server interface {
	SayHello2(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedDd2Server()
}

// UnimplementedDd2Server must be embedded to have forward compatible implementations.
type UnimplementedDd2Server struct {
}

func (UnimplementedDd2Server) SayHello2(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello2 not implemented")
}
func (UnimplementedDd2Server) mustEmbedUnimplementedDd2Server() {}

// UnsafeDd2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Dd2Server will
// result in compilation errors.
type UnsafeDd2Server interface {
	mustEmbedUnimplementedDd2Server()
}

func RegisterDd2Server(s grpc.ServiceRegistrar, srv Dd2Server) {
	s.RegisterService(&Dd2_ServiceDesc, srv)
}

func _Dd2_SayHello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Dd2Server).SayHello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aa.bb.Dd2/SayHello2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Dd2Server).SayHello2(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dd2_ServiceDesc is the grpc.ServiceDesc for Dd2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dd2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aa.bb.Dd2",
	HandlerType: (*Dd2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello2",
			Handler:    _Dd2_SayHello2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Dd.proto",
}
