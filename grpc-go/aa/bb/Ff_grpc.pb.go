// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Ff33Client is the client API for Ff33 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Ff33Client interface {
	SayHello333(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type ff33Client struct {
	cc grpc.ClientConnInterface
}

func NewFf33Client(cc grpc.ClientConnInterface) Ff33Client {
	return &ff33Client{cc}
}

func (c *ff33Client) SayHello333(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/aa.bb.Ff33/SayHello333", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Ff33Server is the server API for Ff33 service.
// All implementations must embed UnimplementedFf33Server
// for forward compatibility
type Ff33Server interface {
	SayHello333(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedFf33Server()
}

// UnimplementedFf33Server must be embedded to have forward compatible implementations.
type UnimplementedFf33Server struct {
}

func (UnimplementedFf33Server) SayHello333(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello333 not implemented")
}
func (UnimplementedFf33Server) mustEmbedUnimplementedFf33Server() {}

// UnsafeFf33Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Ff33Server will
// result in compilation errors.
type UnsafeFf33Server interface {
	mustEmbedUnimplementedFf33Server()
}

func RegisterFf33Server(s grpc.ServiceRegistrar, srv Ff33Server) {
	s.RegisterService(&Ff33_ServiceDesc, srv)
}

func _Ff33_SayHello333_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ff33Server).SayHello333(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aa.bb.Ff33/SayHello333",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ff33Server).SayHello333(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ff33_ServiceDesc is the grpc.ServiceDesc for Ff33 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ff33_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aa.bb.Ff33",
	HandlerType: (*Ff33Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello333",
			Handler:    _Ff33_SayHello333_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Ff.proto",
}
